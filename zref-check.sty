
\ProvidesExplPackage {zref-check} {2021-07-06} { }
  {Flexible cross-references with relative position checks based on zref}

%% chapter{zref setup}

\RequirePackage { zref-user }
\RequirePackage { zref-abspage }

% TODO move these two to Options
\RequirePackage { zref-savepos }
\RequirePackage { zref-hyperref }


% Provide absolute counters for section and chapter, and respective zref
% properties, so that we can make checks about relation of chapters/sections
% regardless of internal counters, since we don't get those for the unnumbered
% (starred) ones.

\int_new:N \g__zrefcheck_abschap_int
\int_new:N \g__zrefcheck_abssec_int

% If the documentclass does not define '\chapter' the only thing that happens
% is that the chapter counter is never incremented, and the section one never
% reset.
\hook_gput_code:nnn { cmd / chapter / before } { zref-check }
  {
    \int_gincr:N \g__zrefcheck_abschap_int
    \int_zero:N \g__zrefcheck_abssec_int
  }

\zref@newprop { abschap } [0] { \int_use:N \g__zrefcheck_abschap_int }
\zref@addprop \ZREF@mainlist { abschap }

\hook_gput_code:nnn { cmd / section / before } { zref-check }
  { \int_gincr:N \g__zrefcheck_abssec_int }

\zref@newprop { abssec } [0] { \int_use:N \g__zrefcheck_abssec_int }
\zref@addprop \ZREF@mainlist { abssec }


% This is the list of properties to be used by the '\zrefcheck' command, that
% is, the list of properties the *references* store.
\zref@newlist { zrefcheck }
\zref@addprops { zrefcheck }
  {
    % minimum set needed
    abspage ,
    abschap ,
    abssec ,
    % if page position is being used
    % TODO Move these two to Options
    posx ,
    posy ,
    % for use in warning messages CHECK am I really using it ?
    page
  }


%% chapter{Options}








%% chapter{Plumbing}

%%% section{Savepos support}

% We need 'zref's label commands to issue '\zref@savepos' every time, and not
% just when using the 'savepos' module's commands, because we want every
% 'zlabel' to have proper coordinates.  For this reason, we have to run a call
% to '\zref@savepos' on a "before hook" to '\ZREF@label'.  However, since the
% required information (position on the page of the text to which the label
% refers to) is only known at shipout, we do this call under a dummy (writes
% nothing) call to '\protected@write' to execute '\zref@savepos' right before
% '\ZREF@label's job is done, emulating what this command does in this regard.
% I think this is somewhat institutionalized, see David Carlisle's comment at
% https://tex.stackexchange.com/a/98810 regarding the '#2' argument of
% '\protected@write'.  See also the discussion in egreg's answer to the same
% question.  Of course, that is also what '\ZREF@label' itself does.  Take
% care though, since what we get is the position of the *label itself*, not
% that of the object to which it refers to (e.g., the caption, see
% https://github.com/ho-tex/zref/issues/12#issuecomment-880022576).
%
% \hook_gput_code:nnn { cmd / ZREF@label / before } { zref-check }
%   {
%     \if@filesw
%       \begingroup
%         \protected@write \@auxout {
%           \zref@savepos
%         }{}
%       \endgroup
%     \fi
%   }
%
% Add 'posx'/'posy' to the 'main' list properties, so that the labels created
% with the standard '\zlabel' from the 'user' module carries the position
% information.
% \zref@addprop \ZREF@mainlist { posx }
% \zref@addprop \ZREF@mainlist { posy }


% An alternate method to get the labels position is to hook into '\zref@label'
% instead, and from there call '\zsavepos' with a constructed label, which can
% later be retrieved.  This is better in all regards than the previous attempt
% of hooking on to '\ZREF@label' to run '\zref@savepos'.  I'm still patching a
% function I'd prefer not to, but it is less lower level and affects only
% '\zref@label' and '\zlabel' and not the rest of the programming API of
% 'zref'.  The problem with patching is, of course, that it reintroduces the
% old load order problems...  The hook to 'begindocument' should mitigate this
% a little, but certainly does not eliminate the issue.  Using 'zref's
% machinery not to mix the interfaces at this point.  Hopefully, this feature
% request I made about this gets in: https://github.com/ho-tex/zref/issues/12.
% If this happens, this patch can be removed, and I can also remove the
% special handling for this procedure at '\__zrefcheck_get_astl:nnn' and
% '\_zrefcheck:nnnnn' (search for all occurrences of
% '\__zrefcheck_labelpos_lblfmt:n').
\hook_gput_code:nnn { begindocument } { zref-check }
  {
    \ZREF@patch{zref@label}{
      \ZREF@Robust\def\zref@label#1{
        \zsavepos{ \__zrefcheck_labelpos_lblfmt:n {#1} }
        \ZREF@org@zref@label{#1}
      }
    }
  }


% NOTE The use of 'zref's 'savepos' module to infer relative position of
% elements of text is somewhat limited, we could even say "flawed".  Ulrike
% Fischer is quite right when she says that "structure and position are two
% different beasts"
% (https://github.com/ho-tex/zref/issues/12#issuecomment-880022576).  Which
% means that using this information for regular labels will depend to some
% degree on not too odd placements of '\zlabel'.  It should do it's job for
% floats as long as long as the label is within the float environment, it
% should do a good job too for sections if the label is placed in sequence (as
% usual, but not guaranteed or enforced).  It does an exact job for the
% dedicated target macros of this package.


%%% section{Label sequence}

% Method for determining relative position: the sequence in which the labels
% get shipped out, inferred from the sequence in which the labels occur in the
% .aux file.
%
% Some relevant info about the sequence of things:
% https://tex.stackexchange.com/a/120978 and 'texdoc lthooks', section "Hooks
% provided by \begin{document}".


% One first attempt at this is to use '\zref@newlabel', which is the macro
% 'zref' uses to store label information in the aux file.  When the .aux file
% is read at the beginning of the compilation, this macro is expanded for each
% of the labels.  So, by redefining this macro we can feed a variable (a L3
% sequence), and then do what it usually does, which is to define each label
% with the internal macro '\@newl@bel', when the .aux file is read.
%
% Patching this macro for this is not possible.  First, '\zref@newlabel' is
% one of those "commands that look ahead" mentioned in 'ltcmdhooks'
% documentation.  Indeed, '\@newl@bel' receives 3 arguments, and
% '\zref@newlabel' just passes the first, the following two will be scanned
% ahead.  Second, the 'ltcmdhooks' hooks are not actually available when the
% .aux file is read, they come only after '\begin{document}'.  Hence,
% redefinition would be the only alternative.  My attempts at this ended up
% registered at https://tex.stackexchange.com/a/604744.
%
% Ulrike Fischer (in the comments to https://tex.stackexchange.com/q/604265)
% suggested something like the below for this purpose.
%
% \cs_gset_protected:Npn \zref@newlabel #1#2
%   {
%     \seq_gput_right:Nn \g__zrefcheck_auxfile_lblseq_seq {#1}
%     \@newl@bel {\ZREF@RefPrefix} {#1} {#2}
%   }
%
% However, though this works, this is not exactly equivalent to the original
% definition.  The difference being that '\ZREF@RefPrefix' is actually not
% expanded at the definition, it is expanded later, when the macro is called.
% And that difference is precisely the reason for the use of '\edef' there in
% the first place.  If anyone were to redefine '\ZREF@RefPrefix' somewhere,
% things would go sour.  Ulrike certainly considered it, and actually
% suggested to hardcode "Z@R" there instead, but that poses problems of its
% own.  A more precise redefinition for '\zref@newlabel' is then the following
% (I have no idea how to do '\edef' in L3 syntax, it seems everything revolves
% around the expansion of the arguments.  There must be, I just don't know.)
%
% \ZREF@Robust\edef\zref@newlabel#1{
%   \noexpand\seq_gput_right:Nn \noexpand\g__zrefcheck_auxfile_lblseq_seq {#1}
%   \noexpand\@newl@bel{\ZREF@RefPrefix}{#1}
% }


% Better than the above is just read it from the aux file directly, no need to
% redefine anything.  Adapted from (poor man's version...) David Carlisle's
% answer https://tex.stackexchange.com/a/147705.  This answer has actually
% been converted into the package 'listlbls' by Norbert Melzer, but it is made
% to work with regular labels, not with 'zref's.  And it also does not really
% expose the information in a retrievable way, as far as I can tell.
%
% NOTE There is some subtlety here as to whether this approach makes it safe
% for us to read the labels at this point without '\zref@wrapper@babel'.  The
% common wisdom is that babel's shorthands are only active after
% '\begin{document}' (e.g., https://tex.stackexchange.com/a/98897).  Alas, it
% is more complicated than that.  Babel's documentation says (in section 9.5
% Shorthands): "To prevent problems with the loading of other packages after
% babel we reset the catcode of the character to the original one at the end
% of the package and of each language file (except with KeepShorthandsActive).
% It is re-activate[d] again at \begin{document}.  We also need to make sure
% that the shorthands are active during the processing of the .aux file.
% Otherwise some citations may give unexpected results in the printout when a
% shorthand was used in the optional argument of \bibitem for example."  This
% is done with '\if@filesw \immediate\write\@mainaux{...}'.  In other words,
% the catcode change is written in the .aux file itself!  Indeed, if you
% inspect the file, you'll find them there.  Besides, there is still the
% ominous "except with KeepShorthandsActive".
%
% However, the *method* I'm using here is not quite the same as the usual run
% of the .aux file, because I'm actively discarding the lines for which the
% first token is not equal to '\zref@newlabel'.  I have tested the famous
% sensitive case for this: 'babel' with 'french' and labels with colons.  And
% I was able to retrieve the information as expected.  Well, *if*
% 'KeepShorthandsActive' is enabled *with 'french'* and we load the package
% *after babel* things do break, but not quite because of the colons in the
% labels.  Even 'siunitx' breaks in the same conditions...
%
% For reference: About what are valid characters for use in labels:
% https://tex.stackexchange.com/a/18312.  About some problems with active
% colons: https://tex.stackexchange.com/a/89470.
%
% About the difference between L3 strings and token lists
% https://tex.stackexchange.com/a/446381, in particular Joseph Wright's
% comment: "Strings are for data that will never be typeset, for example file
% names, identifiers, etc.: if the material may be used in typesetting, it
% should be a token list."  See also moewe's (CW) answer in the same lines.
% Which suggests using L3 strings for the reference labels might be a good
% catch all approach, and possibly more robust.  David Carlisle's comment
% about 'inputenc' is a caveat, but I'm not sure it holds now that pdflatex
% has also built-in utf-8 (see
% https://tex.stackexchange.com/q/446123#comment1516961_446381).
% Still... let's stick to tradition as long as it works, 'zref' already does a
% great job here anyway.

\prop_new:N \g__zrefcheck_auxfile_lblseq_prop

\tl_set:Nn \g_tmpa_tl { \c_sys_jobname_str .aux }
\file_if_exist:nT { \g_tmpa_tl }
  {
    % Retrieve the information from the .aux file, and store it in a property
    % list, so that the sequence can be retrieved in key-value fashion.
    \ior_open:Nn \g_tmpa_ior { \g_tmpa_tl }
    \group_begin:
      \int_zero:N \l_tmpa_int
      \tl_clear:N \l_tmpa_tl
      \tl_clear:N \l_tmpb_tl
      \bool_set_false:N \l_tmpa_bool
      \ior_map_variable:NNn \g_tmpa_ior \l_tmpa_tl
        {
          \tl_map_variable:NNn \l_tmpa_tl \l_tmpb_tl
            {
              \tl_if_eq:NnTF \l_tmpb_tl { \zref@newlabel }
                {
                  % Found a zref@label, signal it.
                  \bool_set_true:N \l_tmpa_bool
                }
                {
                  \bool_if:NTF \l_tmpa_bool
                    {
                      \bool_set_false:N \l_tmpa_bool
                      \int_incr:N \l_tmpa_int
                      \prop_gput:Nxx \g__zrefcheck_auxfile_lblseq_prop
                        { \l_tmpb_tl } { \int_use:N \l_tmpa_int }
                    }
                    {
                      % If there is not a match of the first token with
                      % '\zref@newlabel', break the loop and discard the rest
                      % of the line, to ensure no babel calls to '\catcode' in
                      % the .aux file get expanded.  This also breaks the loop
                      % and discards the rest of the '\zref@newlabel' lines
                      % after we got the label we wanted, since we reset
                      % '\l_tmpa_bool' in the 'T' branch.
                      \tl_map_break:
                    }
                }
            }
        }
    \group_end:
    \ior_close:N \g_tmpa_ior
  }


%%% section{Label formats}

% {<check id int>}
\cs_new:Npn \__zrefcheck_checkbeg_lblfmt:n #1
  { zrefcheck@ \int_use:N #1 @beg }

% {<check id int>}
\cs_new:Npn \__zrefcheck_checkend_lblfmt:n #1
  { zrefcheck@ \int_use:N #1 @end }

% {<label tl>}
\cs_new:Npn \__zrefcheck_labelpos_lblfmt:n #1
  { #1 @zrckpos }


%%% section{Property values}

% A convenience function to retrieve property values from labels.  Uses
% '\g__zrefcheck_auxfile_lblseq_prop' for "lblseq", and calls
% '\zref@extract' for everything else.
%
% We cannot use the return value of '\__zrefcheck_get_as(tl|int):nnn'
% directly, because we need to use the retrieved property values as arguments
% in the checks, however we use here a number of non-expandable operations.
% Hence, we receive a local tl/int variable as third argument and set that, so
% that it is available (and expandable) at the place of use.  For this reason,
% we do not group here, because we are passing a local variable around, but it
% is expected this function will be called within a group.
%
% I'm returning '\c_empty_tl' in case of failure to find the intended property
% value (explicitly in '\zref@extractdefault', but that is also what
% '\tl_clear:N' does).  This can also


\tl_new:N \l__zrefcheck_get_label_tl

% {<label>}{<prop>}{<tl var>}
\cs_new:Npn \__zrefcheck_get_astl:nnn #1#2#3
  {
    \tl_clear:N #3
    \tl_if_eq:nnTF {#2} { lblseq }
      {
        \prop_get:NnNF \g__zrefcheck_auxfile_lblseq_prop {#1} #3
          {
            \msg_warning:nnnn { zref-check }
              { property-not-in-label } {#1} {#2}
          }
      }
      {
        % Handle the special case of savepos labels (can be removed if feature
        % request https://github.com/ho-tex/zref/issues/12 is implemented).
        \tl_set:Nn \l__zrefcheck_get_label_tl {#1}
        \tl_if_eq:nnT {#2} { posx }
          {
            \tl_set:Nx \l__zrefcheck_get_label_tl
              { \__zrefcheck_labelpos_lblfmt:n {#1} }
          }
        \tl_if_eq:nnT {#2} { posy }
          {
            \tl_set:Nx \l__zrefcheck_get_label_tl
              { \__zrefcheck_labelpos_lblfmt:n {#1} }
          }

        % There are three things we need to check to ensure the information we
        % are trying to retrieve here exists: the existence of "label", the
        % existence of "property", and whether the particular label being
        % queried actually contains the property.  If that's all in place, the
        % value is passed to the checks, and it's their responsibility to
        % verify the consistency of this value.
        %
        % The existence of the label is an user facing issue, and a
        % configurable one, so a warning for this should be placed in
        % '\_zrefcheck:nnnnn' (and done with '\zref@refused').  We do check
        % here though for definition with '\zref@ifrefundefined' and silently
        % do nothing if it is undefined, to reduce irrelevant warnings in a
        % fresh compilation round.  The other two are more "internal"
        % problems, either some problem with the checks, or with the
        % configuration of 'zref' for their consumption.
        \zref@ifrefundefined { \l__zrefcheck_get_label_tl }
          {}
          {
            \zref@ifpropundefined {#2}
              {
                \msg_warning:nnnn { zref-check }
                  { property-undefined } {#2}
              }
              {
                \zref@ifrefcontainsprop { \l__zrefcheck_get_label_tl } {#2}
                  {
                    \tl_set:Nx #3
                      {
                        \zref@extractdefault { \l__zrefcheck_get_label_tl }
                          {#2} { \c_empty_tl }
                      }
                  }
                  {
                    \exp_args:Nnnx \msg_warning:nnnn
                      { zref-check } { property-not-in-label }
                      { \l__zrefcheck_get_label_tl } {#2}
                  }
              }
          }
      }
  }

\cs_generate_variant:Nn \__zrefcheck_get_astl:nnn { xnn }

\msg_new:nnn { zref-check } { property-undefined }
  { Property~'#1'~not~defined~on~input~line~\msg_line_number:. }

\msg_new:nnn { zref-check } { property-not-in-label }
  { Label~'#1'~has~no~property~'#2'~on~input~line~\msg_line_number:. }


% '\__zrefcheck_get_asint:nnn' is a very convenient wrapper around the more
% general '\__zrefcheck_get_astl:nnn', since almost always we'll be wanting to
% compare numbers in the checks.  However, it is quite hard for it to ensure
% an integer is *always* returned, even in the case of errors.  And those do
% occur, even in a well structured document (e.g., in a first round of
% compilation).  To complicate things, the L3 integer predicates are *very*
% sensible to receiving any other kind of data, and they *scream*.  To handle
% this '\__zrefcheck_get_asint:nnn' uses '\l__zrefcheck_integer_bool'.  To use
% this function always set '\l__zrefcheck_integer_bool' to true first, then
% call it as much as you need.  If any of these calls got some kind of error,
% '\l__zrefcheck_integer_bool' will have been set to false, and you should
% check that this hasn't happened before actually comparing the integers
% ('\bool_lazy_and:nnTF' is your friend).
\bool_new:N \l__zrefcheck_integer_bool

\tl_new:N \l__zrefcheck_propval_tl

% {<label>}{<prop>}{<int var>}
\cs_new:Npn \__zrefcheck_get_asint:nnn #1#2#3
  {
    \__zrefcheck_get_astl:nnn {#1} {#2} { \l__zrefcheck_propval_tl }
    % Make it an integer data type
    \is_integer:nTF { \l__zrefcheck_propval_tl }
      { \int_set:Nn #3 { \int_eval:n { \l__zrefcheck_propval_tl } } }
      {
        \bool_set_false:N \l__zrefcheck_integer_bool
        % Keep silent if ref is undefined to reduce irrelevant warnings in a
        % fresh compilation round.  Again, this is also not the point to check
        % for undefined references, that's a task for '\_zrefcheck:nnnnn'.
        \zref@ifrefundefined {#1}
          { }
          { \msg_warning:nnn { zref-check } { property-not-integer } {#2} }
      }
  }

% Thanks egreg: https://tex.stackexchange.com/a/244405
\prg_new_conditional:Npnn \is_integer:n #1 { p, T, F, TF }
  {
    \tl_if_empty:oTF {#1}
      { \prg_return_false: } % empty tl is also not an integer
      {
        \tl_if_blank:oTF { \__int_to_roman:w -0#1 }
          { \prg_return_true:  }
          { \prg_return_false: }
      }
  }

\msg_new:nnn { zref-check } { property-not-integer }
  { Property~'#1'~is~not~an~integer \\
    on~input~line~\msg_line_number:. }


%% chapter{zrefcheck}

% *[<options>]{<labels>}[<checks>]{<text>}
\NewDocumentCommand \zrefcheck
  {
    > { \ReverseBoolean } s % "true" -> "with hyperlink"
    O { }
    > { \SplitList { , } } m
    > { \SplitList { , } } O { }
    +m
  }
  {
    \zref@wrapper@babel \_zrefcheck:nnnnn {#3} {#1} {#2} {#4} {#5}
  }

\int_new:N \g__zrefcheck_id_int
\tl_new:N \l__zrefcheck_checkbeg_tl
\tl_new:N \l__zrefcheck_checkend_tl

% An intermediate internal function, which places "labels" as first argument,
% so that it can be protected by '\zref@wrapper@babel'.  This is more or less
% what the definition of '\zref' in 'zref-user.sty' does for this.
% {<labels>}*[<options>][<checks>]{<text>}
\cs_new_protected:Npn \_zrefcheck:nnnnn #1#2#3#4#5
  {
    \int_gincr:N \g__zrefcheck_id_int
    \mode_leave_vertical:
    \group_begin:
      % Names of the labels for this zrefcheck call
      \tl_set:Nx \l__zrefcheck_checkbeg_tl
        { \__zrefcheck_checkbeg_lblfmt:n { \g__zrefcheck_id_int } }
      \tl_set:Nx \l__zrefcheck_checkend_tl
        { \__zrefcheck_checkend_lblfmt:n { \g__zrefcheck_id_int } }

      % Set start label and save pos
      \zref@labelbylist { \l__zrefcheck_checkbeg_tl } { zrefcheck }
      \zsavepos{ \__zrefcheck_labelpos_lblfmt:n { \l__zrefcheck_checkbeg_tl } }

      % Typeset "<text>" (with hyperref!)
      % For hyperlinking, we must check if the reference is defined or not,
      % and not only internal options, to avoid hyperref warning in case of
      % undefined anchor ("suppressing link with empty target" warning).
      \__zrefcheck_get_astl:xnn { \tl_item:nn {#1} {1} } { anchor } { \l_tmpb_tl }
      \hyperlink { \l_tmpb_tl } {#5}

      % Set end label and save pos
      \zref@labelbylist { \l__zrefcheck_checkend_tl } { zrefcheck }
      \zsavepos{ \__zrefcheck_labelpos_lblfmt:n { \l__zrefcheck_checkend_tl } }

      % Now we do the checking

      % Check definition here, as appropriate, \__zrefcheck_get_astl:nnn
      % assumes the label is defined. Use:
      % \zref@ifrefundefined {#1} { } { }


      \__zrefcheck_run_checks:nnv {#4} {#1} { l__zrefcheck_checkbeg_tl }

    \group_end:
  }



%% chapter{Checks}

% What is needed for a check to work?
%
% First, a conditional/predicate function defined with:
%
% \prg_new_conditional:Npnn \__zrefcheck_check_<check>:nn #1#2 { F }
%
% where "<check>", it the name of the check, the first argument is the "label"
% and the second the "reference".  The existence of the check is verified by
% the existence of the function with this name-scheme (and signatures).  Of
% course, this function must return either '\prg_return_true:' or
% '\prg_return_false:'.  Of course, you can define other variants if you need
% internally, and may do a protected definition, if it is needed for the
% content of the check, just what the package does expect and verifies is
% existence of the ':nnF' variant.
%
% Note that the naming convention of the checks adopts the perspective of the
% "reference".  That is, the "before" check should return true if the "label"
% occurs before the "reference".
%
% The checks it does are expected to retrieve 'zref's label information with
% '\__zrefcheck_get_astl:nnn' or '\__zrefcheck_get_asint:nnn' (zref extract
% infrastructure is, naturally, also an alternative for the regular
% properties).  Also, technically speaking, the "reference" argument is also a
% label, actually a pair of them, as set by '\zrefcheck'.  For the "labels",
% any 'zref' property in 'zref's main list is available, the "references"
% store the properties in the 'zrefcheck' list.  Besides those, there is also
% the 'lblseq' (fake) property (for either "labels" or "references"), as
% provided by '\__zrefcheck_process_lblseq:', and stored in
% '\g__zrefcheck_auxfile_lblseq_prop'.
%
% Second, the required properties of labels and references must be duly
% registered for 'zref'.  This can be done with '\zref@newprop',
% '\zref@addprop' and friends, as usual.


%%% section{Running}

% {<list of checks>}{<list of labels>}{<reference>}
\cs_new:Npn \__zrefcheck_run_checks:nnn #1#2#3
  {
    \group_begin:
      \tl_map_inline:nn {#2}
        {
          \tl_map_inline:nn {#1}
            { \__zrefcheck_do_check:nnn {####1} {##1} {#3} }
        }
    \group_end:
  }

\cs_generate_variant:Nn \__zrefcheck_run_checks:nnn { nnv }

% {<check>}{<label>}{<reference>}
\cs_new:Npn \__zrefcheck_do_check:nnn #1#2#3
  {
    \group_begin:
      \cs_if_exist:cTF { __zrefcheck_check_ #1 :nnF }
        {
          \use:c { __zrefcheck_check_ #1 :nnF } {#2} {#3}
            { \msg_warning:nnnn { zref-check } { check-failed } {#1} {#2} }
        }
        { \msg_warning:nnn { zref-check } { check-missing } {#1} }
    \group_end:
  }

\cs_generate_variant:Nn \__zrefcheck_do_check:nnn { nnv }


\msg_new:nnn { zref-check } { check-failed }
  { Check~'#1'~for~label~'#2'~has~failed~on~input~line~\msg_line_number:. }

\msg_new:nnn { zref-check } { check-missing }
  { Check~'#1'~not~defined~on~input~line~\msg_line_number:. }


%%% section{Definitions}

% More readable scratch variables for the tests
\int_new:N \l__zrefcheck_lbl_int
\int_new:N \l__zrefcheck_ref_int
\int_new:N \l__zrefcheck_lbl_a_int
\int_new:N \l__zrefcheck_ref_a_int


%%%% subsection{Within page}

% TODO Move these booleans to Options
% option 'pagepos': values 'both', 'yx', 'labelseq', 'warn'
% preamble only option
\bool_new:N \l__zrefcheck_pagepos_yx_bool
\bool_new:N \l__zrefcheck_pagepos_lblseq_bool
\bool_set_true:N \l__zrefcheck_pagepos_yx_bool
\bool_set_true:N \l__zrefcheck_pagepos_lblseq_bool


\prg_new_protected_conditional:Npnn \__zrefcheck_check_above:nn #1#2 { F , TF }
  {
    \group_begin:
      \bool_set_true:N \l_tmpa_bool
      \bool_if:nT { \l__zrefcheck_pagepos_yx_bool }
        {
          \__zrefcheck_check_above_yx:nnF {#1} {#2}
            { \bool_set_false:N \l_tmpa_bool }
        }
      \bool_if:nT { \l__zrefcheck_pagepos_lblseq_bool }
        {
          \__zrefcheck_check_above_lblseq:nnF {#1} {#2}
            { \bool_set_false:N \l_tmpa_bool }
        }
      \bool_if:nF
        % 'warn' option
        { \l__zrefcheck_pagepos_yx_bool || \l__zrefcheck_pagepos_lblseq_bool }
        { \bool_set_false:N \l_tmpa_bool }
      \bool_if:nTF { \l_tmpa_bool }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_below:nn #1#2 { F , TF }
  {
    \bool_if:nTF
      { \l__zrefcheck_pagepos_yx_bool || \l__zrefcheck_pagepos_lblseq_bool }
      {
        \__zrefcheck_check_above:nnTF {#1} {#2}
          { \prg_return_false: }
          { \prg_return_true:  }
      }
      % 'warn' option
      { \prg_return_false: }
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_above_yx:nn #1#2 { F }
  {
    \group_begin:
      \__zrefcheck_check_thispage:nnTF {#1} {#2}
        {
          \bool_set_true:N \l__zrefcheck_integer_bool
          \__zrefcheck_get_asint:nnn {#1} { posy } { \l__zrefcheck_lbl_int }
          \__zrefcheck_get_asint:nnn {#2} { posy } { \l__zrefcheck_ref_int }
          \__zrefcheck_get_asint:nnn {#1} { posx } { \l__zrefcheck_lbl_a_int }
          \__zrefcheck_get_asint:nnn {#2} { posx } { \l__zrefcheck_ref_a_int }
          \bool_lazy_and:nnTF
            { \l__zrefcheck_integer_bool }
            {
              (
                \int_compare_p:nNn
                  { \l__zrefcheck_lbl_int } > { \l__zrefcheck_ref_int } ||
                (
                  \int_compare_p:nNn
                    { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int } &&
                  \int_compare_p:nNn
                    { \l__zrefcheck_lbl_a_int } < { \l__zrefcheck_ref_a_int }
                )
              ) &&
              ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
              ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 } &&
              ! \int_compare_p:nNn { \l__zrefcheck_lbl_a_int } = { 0 } &&
              ! \int_compare_p:nNn { \l__zrefcheck_ref_a_int } = { 0 }
            }
            { \group_insert_after:N \prg_return_true:  }
            { \group_insert_after:N \prg_return_false: }
        }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_above_lblseq:nn #1#2 { F }
  {
    \group_begin:
      \__zrefcheck_check_thispage:nnTF {#1} {#2}
        {
          \bool_set_true:N \l__zrefcheck_integer_bool
          \__zrefcheck_get_asint:nnn {#1} { lblseq } { \l__zrefcheck_lbl_int }
          \__zrefcheck_get_asint:nnn {#2} { lblseq } { \l__zrefcheck_ref_int }
          \bool_lazy_and:nnTF
            { \l__zrefcheck_integer_bool }
            {
              \int_compare_p:nNn
                { \l__zrefcheck_lbl_int } < { \l__zrefcheck_ref_int } &&
              ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
              ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
            }
            { \group_insert_after:N \prg_return_true:  }
            { \group_insert_after:N \prg_return_false: }
        }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }


%%%% subsection{Before / After}


\prg_new_protected_conditional:Npnn \__zrefcheck_check_before:nn #1#2 { F }
  {
    \__zrefcheck_check_pagesbefore:nnTF {#1} {#2}
      { \prg_return_true: }
      {
        \__zrefcheck_check_above:nnTF {#1} {#2}
          { \prg_return_true:  }
          { \prg_return_false: }
      }
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_after:nn #1#2 { F }
  {
    \__zrefcheck_check_pagesafter:nnTF {#1} {#2}
      { \prg_return_true: }
      {
        \__zrefcheck_check_below:nnTF {#1} {#2}
          { \prg_return_true:  }
          { \prg_return_false: }
      }
  }


%%%% subsection{Between pages}


\prg_new_protected_conditional:Npnn \__zrefcheck_check_thispage:nn #1#2 { F , TF }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int } &&
            % '0' is the default value of 'abspage' property, and this
            % value should not happen normally for this property, since
            % even the first page, after it gets shipped out, will store
            % '1'.  So, if we do find '0' here, better signal something is
            % wrong.
            ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
            ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }


\prg_new_protected_conditional:Npnn \__zrefcheck_check_nextpage:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int + 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_prevpage:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int - 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_pagesbefore:nn #1#2 { F , TF }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } < { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\cs_new_eq:NN \__zrefcheck_check_ppbefore:nnF \__zrefcheck_check_pagesbefore:nnF

\prg_new_protected_conditional:Npnn \__zrefcheck_check_pagesafter:nn #1#2 { F , TF }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } > { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\cs_new_eq:NN \__zrefcheck_check_ppafter:nnF \__zrefcheck_check_pagesafter:nnF

\prg_new_protected_conditional:Npnn \__zrefcheck_check_facing:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          % There exists no "facing" page if the document is not twoside.
          \legacy_if_p:n { @twoside } &&
          % Now we test "facing"
          (
            (
              \int_if_odd_p:n { \l__zrefcheck_ref_int } &&
              \int_compare_p:nNn
                { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int - 1 }
            ) ||
            (
              \int_if_even_p:n { \l__zrefcheck_ref_int } &&
              \int_compare_p:nNn
                { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int + 1 }
            )
          ) &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }


% TODO Move this variable to Options
\int_new:N \l__zrefcheck_close_range_int
\int_set:Nn \l__zrefcheck_close_range_int { 5 }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_close:nn #1#2 { F , TF }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abspage } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abspage } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \int_abs:n { \l__zrefcheck_lbl_int - \l__zrefcheck_ref_int } }
            <
            { \l__zrefcheck_close_range_int + 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_far:nn #1#2 { F }
  {
    \__zrefcheck_check_close:nnTF {#1} {#2}
      { \prg_return_false: }
      { \prg_return_true:  }
  }


%%%% subsection{Chapter}

\prg_new_protected_conditional:Npnn \__zrefcheck_check_thischap:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abschap } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abschap } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int } &&
          % '0' is the default value of 'abschap' property, and means here no
          % '\chapter' has yet been issued, therefore it cannot be "this
          % chapter", nor "the next chapter", nor "the previous chapter", it
          % is just "no chapter".
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_nextchap:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abschap } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abschap } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int + 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_prevchap:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abschap } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abschap } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int - 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_chapsbefore:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abschap } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abschap } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } < { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_chapsafter:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abschap } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abschap } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } > { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }


%%%% subsection{Section}

\prg_new_protected_conditional:Npnn \__zrefcheck_check_thissec:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abssec } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abssec } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int } &&
          % '0' is the default value of 'abssec' property, and means here no
          % '\section' has yet been issued since its counter has been reset,
          % which occurs at the beginning of the document and at every
          % chapter.  Hence, as is the case for chapters, '0' is just "not a
          % section".
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_nextsec:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abssec } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abssec } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int + 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_prevsec:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abssec } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abssec } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } = { \l__zrefcheck_ref_int - 1 } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_secsbefore:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abssec } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abssec } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } < { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

\prg_new_protected_conditional:Npnn \__zrefcheck_check_secsafter:nn #1#2 { F }
  {
    \group_begin:
      \bool_set_true:N \l__zrefcheck_integer_bool
      \__zrefcheck_get_asint:nnn {#1} { abssec } { \l__zrefcheck_lbl_int }
      \__zrefcheck_get_asint:nnn {#2} { abssec } { \l__zrefcheck_ref_int }
      \bool_lazy_and:nnTF
        { \l__zrefcheck_integer_bool }
        {
          \int_compare_p:nNn
            { \l__zrefcheck_lbl_int } > { \l__zrefcheck_ref_int } &&
          % Ditto.
          ! \int_compare_p:nNn { \l__zrefcheck_lbl_int } = { 0 } &&
          ! \int_compare_p:nNn { \l__zrefcheck_ref_int } = { 0 }
        }
        { \group_insert_after:N \prg_return_true:  }
        { \group_insert_after:N \prg_return_false: }
    \group_end:
  }

%% chapter{Targets}